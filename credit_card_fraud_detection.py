# -*- coding: utf-8 -*-
"""Credit Card Fraud detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s-_OTmGFbM2UTmwW8nw_lnS8PbPsSh9t
"""

#importing the modules
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#load the dataset to pandas to create a dataframe
credit_card_data = pd.read_csv("/content/creditcard.csv",on_bad_lines='skip')

#getting to know the dataset
credit_card_data.head()

#dataset info
credit_card_data.info()

#get number of missing values in every column
credit_card_data.isnull().sum()

import matplotlib.pyplot as plt
import seaborn as sns

#checking the distribution of legit transactions
credit_card_data['Class'].value_counts()

#this dataset is highly unbalanced
#seperating the data for analysis
legit = credit_card_data[credit_card_data.Class ==0.0]
fraud = credit_card_data[credit_card_data.Class ==1.0]

print(legit.shape)
print(fraud.shape)

#statistical measures of the data
legit.Amount.describe()

fraud.Amount.describe()

#comparing the values for both the transactions
credit_card_data.groupby('Class').mean()

"""Under-Sampling"""

#Building a sample dataset containing similar distribution of normal transactions and fraudulent transactions
legit_sample = legit.sample(n=882)

#combining two dataframes
new_dataset = pd.concat([legit_sample,fraud],axis=0)

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting data into features and targets"""

x=new_dataset.drop(columns='Class',axis=1)
y=new_dataset['Class']

print(x)

print(y)

#training and test data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

#Model training
#Logistic regression model
model = LogisticRegression()

#training the model
model.fit(x_train,y_train)

"""Model Evaluation"""

#accuracy score
x_train_prediction = model.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction,y_train)

print("Accuracy on Training data : ",training_data_accuracy)

#accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_acc = accuracy_score(x_test_prediction,y_test)

print("Accuracy on Training data : ",test_data_acc)